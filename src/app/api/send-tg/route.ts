import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const body = await req.json();

  const { name, email, phone, messageText } = body;

  if (!name || (!email && !phone)) {
    return NextResponse.json(
      { error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã" },
      { status: 400 }
    );
  }

  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!token || !chatId) {
    return NextResponse.json(
      { error: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è" },
      { status: 500 }
    );
  }

  const message = `
 barbarisstudio.vercel
üë§ –ò–º—è: ${name}
üìß Email: ${email || "-"}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || "-"}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText || "_"}
  `;

  const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;

  try {
    const res = await fetch(telegramUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
      }),
    });

    if (!res.ok) {
      const err = await res.text();
      return NextResponse.json({ error: err }, { status: 500 });
    }

    return NextResponse.json({ success: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" });
  } catch (error: any) {
    return NextResponse.json(
      { error: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏" },
      { status: 500 }
    );
  }
}
